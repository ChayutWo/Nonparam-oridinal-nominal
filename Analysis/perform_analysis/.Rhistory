numerator = numerator*2/mean(numerator) # attempt to scale back y
x_2_sample = rchisq(10000,df=num_dof)
ks.test(x = numerator, y = ecdf(x_2_sample))
qqplot(numerator, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator')
mean(numerator)
# DO NOT ALTER CODE IN THIS CHUNK
# The very first time you use this R markdown file, you should install each of the packages below.
# The same goes for other packages you might decide to use
# Remember that you only need to install each R package once in R (ever -- unless you change computers).
# All you need to do whenever you need to use the package again (after restarting the R session),
# is to use the library function to call the package.
# For example, type install.packages("knitr") in the console to install the knitr package.
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(arm)
library(pROC)
library(tidyverse)
library(MASS)
library(tigerstats)
library(leaps)
library(car)
library(rms)
require(caret)
require(e1071)
library(lme4)
library(lattice)
library(broom)
library(boot)
library(ggplot2)
library(cobalt)
require(tidyverse)
require(rstanarm)
require(magrittr)
require(rstan)
require(MCMCpack)
library(abind)
library(matrixStats)
library(truncnorm)
library(mvtnorm)
library(MCMCpack)
library(mnormt)
library(coda)
library(R.matlab)
mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6.mat")
numerator = mat[['Num.value']]
denominator = mat[['Den.value']]
print('mean numerator')
mean(numerator)
print('mean denominator')
mean(denominator)
num_dof = 1 #dimension of the target space
denom_dof = 2*(18144-240) # N-t N - size of sample, t - dimension of clutter space
numerator = numerator*num_dof/mean(numerator) # attempt to scale back y
x_2_sample = rchisq(10000,df=num_dof)
ks.test(x = numerator, y = ecdf(x_2_sample))
qqplot(numerator, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator')
# DO NOT ALTER CODE IN THIS CHUNK
# The very first time you use this R markdown file, you should install each of the packages below.
# The same goes for other packages you might decide to use
# Remember that you only need to install each R package once in R (ever -- unless you change computers).
# All you need to do whenever you need to use the package again (after restarting the R session),
# is to use the library function to call the package.
# For example, type install.packages("knitr") in the console to install the knitr package.
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(arm)
library(pROC)
library(tidyverse)
library(MASS)
library(tigerstats)
library(leaps)
library(car)
library(rms)
require(caret)
require(e1071)
library(lme4)
library(lattice)
library(broom)
library(boot)
library(ggplot2)
library(cobalt)
require(tidyverse)
require(rstanarm)
require(magrittr)
require(rstan)
require(MCMCpack)
library(abind)
library(matrixStats)
library(truncnorm)
library(mvtnorm)
library(MCMCpack)
library(mnormt)
library(coda)
library(R.matlab)
mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6.mat")
numerator = mat[['Num.value']]
denominator = mat[['Den.value']]
print('mean numerator')
mean(numerator)
print('mean denominator')
mean(denominator)
num_dof = 2*1 #dimension of the target space
denom_dof = 2*(18144-240) # N-t N - size of sample, t - dimension of clutter space
numerator = numerator*num_dof/mean(numerator) # attempt to scale back y
x_2_sample = rchisq(10000,df=num_dof)
ks.test(x = numerator, y = ecdf(x_2_sample))
qqplot(numerator, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator')
mean(numerator)
?rchisq
qqplot(numerator[numerator<20], x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator')
qqplot(numerator, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator')
# DO NOT ALTER CODE IN THIS CHUNK
# The very first time you use this R markdown file, you should install each of the packages below.
# The same goes for other packages you might decide to use
# Remember that you only need to install each R package once in R (ever -- unless you change computers).
# All you need to do whenever you need to use the package again (after restarting the R session),
# is to use the library function to call the package.
# For example, type install.packages("knitr") in the console to install the knitr package.
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(arm)
library(pROC)
library(tidyverse)
library(MASS)
library(tigerstats)
library(leaps)
library(car)
library(rms)
require(caret)
require(e1071)
library(lme4)
library(lattice)
library(broom)
library(boot)
library(ggplot2)
library(cobalt)
require(tidyverse)
require(rstanarm)
require(magrittr)
require(rstan)
require(MCMCpack)
library(abind)
library(matrixStats)
library(truncnorm)
library(mvtnorm)
library(MCMCpack)
library(mnormt)
library(coda)
library(R.matlab)
mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6.mat")
numerator = mat[['Num.value']]
denominator = mat[['Den.value']]
print('mean numerator')
mean(numerator)
print('mean denominator')
mean(denominator)
num_dof = 2*1 #dimension of the target space
denom_dof = 2*(18144-240) # N-t N - size of sample, t - dimension of clutter space
numerator = numerator*num_dof/mean(numerator) # attempt to scale back y
x_2_sample = rchisq(10000,df=num_dof)
ks.test(x = numerator, y = ecdf(x_2_sample))
qqplot(numerator, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator')
# DO NOT ALTER CODE IN THIS CHUNK
# The very first time you use this R markdown file, you should install each of the packages below.
# The same goes for other packages you might decide to use
# Remember that you only need to install each R package once in R (ever -- unless you change computers).
# All you need to do whenever you need to use the package again (after restarting the R session),
# is to use the library function to call the package.
# For example, type install.packages("knitr") in the console to install the knitr package.
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(arm)
library(pROC)
library(tidyverse)
library(MASS)
library(tigerstats)
library(leaps)
library(car)
library(rms)
require(caret)
require(e1071)
library(lme4)
library(lattice)
library(broom)
library(boot)
library(ggplot2)
library(cobalt)
require(tidyverse)
require(rstanarm)
require(magrittr)
require(rstan)
require(MCMCpack)
library(abind)
library(matrixStats)
library(truncnorm)
library(mvtnorm)
library(MCMCpack)
library(mnormt)
library(coda)
library(R.matlab)
mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6.mat")
numerator = mat[['Num.value']]
denominator = mat[['Den.value']]
print('mean numerator')
mean(numerator)
print('mean denominator')
mean(denominator)
num_dof = 2*1 #dimension of the target space
denom_dof = 2*(18144-240) # N-t N - size of sample, t - dimension of clutter space
numerator = numerator*num_dof/mean(numerator) # attempt to scale back y
x_2_sample = rchisq(10000,df=num_dof)
ks.test(x = numerator, y = ecdf(x_2_sample))
print(mean(numerator))
print(mean(x_2_sample))
qqplot(numerator, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator')
denominator = denominator*denom_dof/mean(denominator) # attempt to scale back y
x_2_sample = rchisq(10000,df=denom_dof)
ks.test(x = denominator, y = ecdf(x_2_sample))
print(mean(denominator))
print(mean(x_2_sample))
qqplot(denominator, x_2_sample, ylab = 'X^2(dof = 2*(N-t))', xlab = 'denominator')
mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6.mat")
numerator = mat[['Num.value']]
denominator = mat[['Den.value']]
print('mean numerator')
mean(numerator)
print('mean denominator')
mean(denominator)
0.02386263/1.319091e-05
# DO NOT ALTER CODE IN THIS CHUNK
# The very first time you use this R markdown file, you should install each of the packages below.
# The same goes for other packages you might decide to use
# Remember that you only need to install each R package once in R (ever -- unless you change computers).
# All you need to do whenever you need to use the package again (after restarting the R session),
# is to use the library function to call the package.
# For example, type install.packages("knitr") in the console to install the knitr package.
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(arm)
library(pROC)
library(tidyverse)
library(MASS)
library(tigerstats)
library(leaps)
library(car)
library(rms)
require(caret)
require(e1071)
library(lme4)
library(lattice)
library(broom)
library(boot)
library(ggplot2)
library(cobalt)
require(tidyverse)
require(rstanarm)
require(magrittr)
require(rstan)
require(MCMCpack)
library(abind)
library(matrixStats)
library(truncnorm)
library(mvtnorm)
library(MCMCpack)
library(mnormt)
library(coda)
library(R.matlab)
mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6.mat")
numerator = mat[['Num.value']]
denominator = mat[['Den.value']]
print('mean numerator')
mean(numerator)
print('mean denominator')
mean(denominator)
num_dof = 2*1 #dimension of the target space
denom_dof = 2*(18144-240) # N-t N - size of sample, t - dimension of clutter space
denom_dof = 2*1998
numerator = numerator*num_dof/mean(numerator) # attempt to scale back y
x_2_sample = rchisq(10000,df=num_dof)
ks.test(x = numerator, y = ecdf(x_2_sample))
print(mean(numerator))
print(mean(x_2_sample))
qqplot(numerator, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator')
denominator = denominator*denom_dof/mean(denominator) # attempt to scale back y
x_2_sample = rchisq(10000,df=denom_dof)
ks.test(x = denominator, y = ecdf(x_2_sample))
print(mean(denominator))
print(mean(x_2_sample))
qqplot(denominator, x_2_sample, ylab = 'X^2(dof = 2*(N-t))', xlab = 'denominator')
qqplot(denominator[denominator<4000], x_2_sample, ylab = 'X^2(dof = 2*(N-t))', xlab = 'denominator')
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(readr)
library(xtable)
source("../../utils/compute_coverage.R")
data_name = 'MCAR_30'
n_imputations = 50
n_way = 1
coverage = coverage_models(data_name, n_way, n_imputations)
df = format_list(coverage)
df_1way = df
View(df_1way)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 30% values MCAR (Marginal probabilities)', digits = 3)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 30% values MCAR (Marginal probabilities)', digits = 2)
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(readr)
library(xtable)
source("../../utils/compute_coverage.R")
data_name = 'MCAR_45'
n_imputations = 50
n_way = 1
coverage = coverage_models(data_name, n_way, n_imputations)
df = format_list(coverage)
df_1way = df
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 45% values MCAR (Marginal probabilities)', digits = 3)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 45% values MCAR (Marginal probabilities)', digits = 4)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 45% values MCAR (Marginal probabilities)', digits = 5)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 45% values MCAR (Marginal probabilities)', digits = 2)
# DO NOT ALTER CODE IN THIS CHUNK
# The very first time you use this R markdown file, you should install each of the packages below.
# The same goes for other packages you might decide to use
# Remember that you only need to install each R package once in R (ever -- unless you change computers).
# All you need to do whenever you need to use the package again (after restarting the R session),
# is to use the library function to call the package.
# For example, type install.packages("knitr") in the console to install the knitr package.
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(arm)
library(pROC)
library(tidyverse)
library(MASS)
library(tigerstats)
library(leaps)
library(car)
library(rms)
require(caret)
require(e1071)
library(lme4)
library(lattice)
library(broom)
library(boot)
library(ggplot2)
library(cobalt)
require(tidyverse)
require(rstanarm)
require(magrittr)
require(rstan)
require(MCMCpack)
library(abind)
library(matrixStats)
library(truncnorm)
library(mvtnorm)
library(MCMCpack)
library(mnormt)
library(coda)
library(R.matlab)
mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6_NormMax.mat")
#mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6.mat")
numerator = mat[['Num.value']]
denominator = mat[['Den.value']]
print('mean numerator')
mean(numerator)
print('mean denominator')
mean(denominator)
98.90979/0.04175232
hist(numerator)
hist(denominator)
num_dof = 2*1 #dimension of the target space
denom_dof = 2*(18144-240) # N-t N - size of sample, t - dimension of clutter space
denom_dof = 2*1998
numerator = numerator*num_dof/mean(numerator) # attempt to scale back y
x_2_sample = rchisq(100000,df=num_dof)
ks.test(x = numerator, y = ecdf(x_2_sample))
print(mean(numerator))
print(mean(x_2_sample))
mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6_NormMax.mat")
#mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6.mat")
numerator = mat[['Num.value']]
denominator = mat[['Den.value']]
print('mean numerator')
mean(numerator)
print('mean denominator')
mean(denominator)
num_dof = 2*1 #dimension of the target space
denom_dof = 2*(18144-240) # N-t N - size of sample, t - dimension of clutter space
denom_dof = 2*1998
numerator = numerator*num_dof/mean(numerator) # attempt to scale back y
x_2_sample = rchisq(100000,df=num_dof)
ks.test(x = numerator, y = ecdf(x_2_sample))
print(mean(numerator))
print(mean(x_2_sample))
mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6_NormMax.mat")
#mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6.mat")
numerator = mat[['Num.value']]
denominator = mat[['Den.value']]
print('mean numerator')
mean(numerator)
print('mean denominator')
mean(denominator)
num_dof = 2*1 #dimension of the target space
denom_dof = 2*(18144-240) # N-t N - size of sample, t - dimension of clutter space
denom_dof = 2*1998
numerator = numerator*num_dof/mean(numerator) # attempt to scale back y
x_2_sample = rchisq(100000,df=num_dof)
ks.test(x = numerator, y = ecdf(x_2_sample))
print(mean(numerator))
print(mean(x_2_sample))
qqplot(numerator, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator')
max(x_2_sample)
qqplot(numerator, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator', title = 'Q-Q plot')
qqplot(numerator, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator', main = 'Q-Q plot')
hist(x_2_sample)
x_sample_2 = rchisq(100000,df=num_dof)
qqplot(x_sample_2, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator', main = 'Q-Q plot')
dummy = rchisq(100000,df=num_dof)
qqplot(dummy, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator', main = 'Q-Q plot')
dummy = rchisq(100000,df=num_dof)
qqplot(dummy, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'dummy', main = 'Q-Q plot')
dummy = rchisq(100000,df=num_dof)
qqplot(dummy, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'dummy', main = 'Q-Q plot')
ks.test(x = dummy, y = ecdf(x_2_sample))
dummy = rchisq(100000,df=num_dof)
qqplot(dummy, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'dummy', main = 'Q-Q plot')
ks.test(x = dummy, y = ecdf(x_2_sample))
dummy = rchisq(100000,df=num_dof)
qqplot(dummy, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'dummy', main = 'Q-Q plot')
ks.test(x = dummy, y = ecdf(x_2_sample))
dummy = rchisq(1000,df=num_dof)
qqplot(dummy, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'dummy', main = 'Q-Q plot')
ks.test(x = dummy, y = ecdf(x_2_sample))
dummy = rchisq(1000,df=num_dof)
qqplot(dummy, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'dummy', main = 'Q-Q plot')
ks.test(x = dummy, y = ecdf(x_2_sample))
dummy = rchisq(10000,df=num_dof)
qqplot(dummy, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'dummy', main = 'Q-Q plot')
ks.test(x = dummy, y = ecdf(x_2_sample))
ks.test
dummy = rchisq(10000,df=num_dof)
qqplot(dummy, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'dummy', main = 'Q-Q plot')
ks.test(x = dummy, y = 'pchisq', num_dof)
dummy = rchisq(10000,df=num_dof)
qqplot(dummy, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'dummy', main = 'Q-Q plot')
ks.test(x = dummy, y = 'pchisq', num_dof)
mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6_NormMax.mat")
#mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6.mat")
numerator = mat[['Num.value']]
denominator = mat[['Den.value']]
print('mean numerator')
mean(numerator)
print('mean denominator')
mean(denominator)
num_dof = 2*1 #dimension of the target space
denom_dof = 2*(18144-240) # N-t N - size of sample, t - dimension of clutter space
denom_dof = 2*1998
numerator = numerator*num_dof/mean(numerator) # attempt to scale back y
x_2_sample = rchisq(100000,df=num_dof)
ks.test(x = numerator, y = 'pchisq', num_dof)
print(mean(numerator))
print(mean(x_2_sample))
dummy = rchisq(10000,df=num_dof)
qqplot(dummy, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'dummy', main = 'Q-Q plot')
ks.test(x = dummy, y = 'pchisq', num_dof)
?qqplot
mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6_NormMax.mat")
#mat <- readMat("./2000trials_OneTarget_at_6_80_SingleCellGLR_at80_6.mat")
numerator = mat[['Num.value']]
denominator = mat[['Den.value']]
print('mean numerator')
mean(numerator)
print('mean denominator')
mean(denominator)
num_dof = 2*1 #dimension of the target space
denom_dof = 2*(18144-240) # N-t N - size of sample, t - dimension of clutter space
denom_dof = 2*1998
numerator = numerator*num_dof/mean(numerator) # attempt to scale back y
x_2_sample = rchisq(100000,df=num_dof)
ks.test(x = numerator, y = 'pchisq', num_dof)
print(mean(numerator))
print(mean(x_2_sample))
dummy = rchisq(10000,df=num_dof)
qqplot(dummy, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'dummy', main = 'Q-Q plot')
ks.test(x = dummy, y = 'pchisq', num_dof)
qqplot(numerator, x_2_sample, ylab = 'X^2(dof = 2)', xlab = 'numerator', main = 'Q-Q plot')
