df_2way = df
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 30% values MCAR (Bivariate probabilities)', digits = 2)
par(mfrow=c(1,2), oma = c(5.5,4.5,0.2,0.2) + 0.1, mar = c(0.25,0.25,1.25,1.25) + 0.1)
boxplot(df_1way, col = 'light blue', ylim = c(0,1), main = paste('Coverage: Marginal pmf'),
las = 2)
boxplot(df_2way, col = 'peachpuff', ylim = c(0,1), main = paste('Coverage: Bivariate pmf'),
las = 2, yaxt="n")
axis(2, labels=FALSE)
title(ylab = "Coverage (fraction)",
outer = TRUE, line = 3)
n_way = 3
coverage = coverage_models(data_name, n_way, n_imputations)
df = format_list(coverage)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 30% values MCAR (Trivariate probabilities)', digits = 2)
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(readr)
library(xtable)
source("../../utils/compute_coverage.R")
data_name = 'MCAR_45'
n_imputations = 10
n_way = 1
coverage = coverage_models(data_name, n_way, n_imputations)
df = format_list(coverage)
df_1way = df
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 45% values MCAR (Marginal probabilities)', digits = 2)
# boxplot for estimates for marginal distribution
boxplot(df, col = 'light blue', xlab = 'Imputation method',
ylab = 'Coverage (fraction)', ylim = c(0,1),
main = paste('Coverage from different imputation methods: Marginal pmf'))
n_way = 2
coverage = coverage_models(data_name, n_way, n_imputations)
df = format_list(coverage)
df_2way = df
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 45% values MCAR (Bivariate probabilities)', digits = 2)
par(mfrow=c(1,2), oma = c(5.5,4.5,0.2,0.2) + 0.1, mar = c(0.25,0.25,1.25,1.25) + 0.1)
boxplot(df_1way, col = 'light blue', ylim = c(0,1), main = paste('Coverage: Marginal pmf'),
las = 2)
boxplot(df_2way, col = 'peachpuff', ylim = c(0,1), main = paste('Coverage: Bivariate pmf'),
las = 2, yaxt="n")
axis(2, labels=FALSE)
title(ylab = "Coverage (fraction)",
outer = TRUE, line = 3)
n_way = 3
coverage = coverage_models(data_name, n_way, n_imputations)
df = format_list(coverage)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 45% values MCAR (Trivariate probabilities)', digits = 2)
sum(c(7,7,7,19,5,4,7,2,17,3,13))
sum(c(7,7,7,19,5,4,7,2,17,3,13)-1)
# DO NOT ALTER CODE IN THIS CHUNK
# The very first time you use this R markdown file, you should install each of the packages below.
# The same goes for other packages you might decide to use
# Remember that you only need to install each R package once in R (ever -- unless you change computers).
# All you need to do whenever you need to use the package again (after restarting the R session),
# is to use the library function to call the package.
# For example, type install.packages("knitr") in the console to install the knitr package.
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(arm)
library(pROC)
library(tidyverse)
library(MASS)
library(tigerstats)
library(leaps)
library(car)
library(rms)
require(caret)
require(e1071)
library(lme4)
library(lattice)
library(broom)
library(boot)
library(ggplot2)
library(cobalt)
require(tidyverse)
require(rstanarm)
require(magrittr)
require(rstan)
require(MCMCpack)
library(abind)
library(matrixStats)
library(truncnorm)
library(mvtnorm)
library(MCMCpack)
library(mnormt)
library(coda)
model_name = 'GAINcat'
data_name = 'MCAR_30'
n_way = 1
n_imputations = 10
# import required functions
source("../../utils/compute_coverage.R")
source("../../utils/load_result.R")
source("../../utils/get_true_pmf.R")
# get true pmf
TRUE_Q = get_true_pmf(n_way)
# load result
output_list = load_result(model_name, data_name, n_way)
model_name = 'GAIN_CAT'
data_name = 'MCAR_30'
n_way = 1
n_imputations = 10
# import required functions
source("../../utils/compute_coverage.R")
source("../../utils/load_result.R")
source("../../utils/get_true_pmf.R")
# get true pmf
TRUE_Q = get_true_pmf(n_way)
# load result
output_list = load_result(model_name, data_name, n_way)
q_bar = output_list[['q_bar']] # mean estimate
u_bar = output_list[['u_bar']] # within group variance
b = output_list[['b']] # between group variance
dof = output_list[['dof']] # degree of freedom
# calculate total sd
total_sd = sqrt((1+1/n_imputations)*b + u_bar)
# calculate upper bound and lower bound of the 95% CI
q_alpha = qt(0.975, df = dof)
upper_bound = q_bar + q_alpha*total_sd
lower_bound = q_bar - q_alpha*total_sd
# calculate coverage 0/1 and return the mean of each pmf
Q = matrix(rep(TRUE_Q, 100), nrow = 100, byrow = TRUE)
coverage = apply((lower_bound<=Q) & (Q<=upper_bound), MARGIN = 2, FUN = mean)
View(lower_bound)
View(upper_bound)
lower_GAIN = lower_bound
upper_GAIN = upper_bound
model_name = 'DP'
data_name = 'MCAR_30'
n_way = 1
n_imputations = 10
source("../../utils/load_result.R")
source("../../utils/get_true_pmf.R")
# get true pmf
TRUE_Q = get_true_pmf(n_way)
# load result
output_list = load_result(model_name, data_name, n_way)
q_bar = output_list[['q_bar']] # mean estimate
u_bar = output_list[['u_bar']] # within group variance
b = output_list[['b']] # between group variance
dof = output_list[['dof']] # degree of freedom
# calculate total sd
total_sd = sqrt((1+1/n_imputations)*b + u_bar)
# calculate upper bound and lower bound of the 95% CI
q_alpha = qt(0.975, df = dof)
upper_bound = q_bar + q_alpha*total_sd
lower_bound = q_bar - q_alpha*total_sd
# calculate coverage 0/1 and return the mean of each pmf
Q = matrix(rep(TRUE_Q, 100), nrow = 100, byrow = TRUE)
coverage = apply((lower_bound<=Q) & (Q<=upper_bound), MARGIN = 2, FUN = mean)
upper_GAIN - lower_GAIN
dim(upper_GAIN)
mean((upper_GAIN-lower_GAIN)<(upper_bound-lower_bound))
mean((upper_GAIN-lower_GAIN)/(upper_bound-lower_bound))
model_name = 'GAIN_CAT'
data_name = 'MCAR_30'
n_way = 1
n_imputations = 10
# import required functions
source("../../utils/compute_coverage.R")
source("../../utils/load_result.R")
source("../../utils/get_true_pmf.R")
# get true pmf
TRUE_Q = get_true_pmf(n_way)
# load result
output_list = load_result(model_name, data_name, n_way)
q_bar = output_list[['q_bar']] # mean estimate
u_bar = output_list[['u_bar']] # within group variance
b = output_list[['b']] # between group variance
dof = output_list[['dof']] # degree of freedom
# calculate total sd
total_sd = sqrt((1+1/n_imputations)*b + u_bar)
# calculate upper bound and lower bound of the 95% CI
q_alpha = qt(0.975, df = dof)
upper_bound = q_bar + q_alpha*total_sd
lower_bound = q_bar - q_alpha*total_sd
# calculate coverage 0/1 and return the mean of each pmf
Q = matrix(rep(TRUE_Q, 100), nrow = 100, byrow = TRUE)
coverage = apply((lower_bound<=Q) & (Q<=upper_bound), MARGIN = 2, FUN = mean)
View(q_alpha)
View(u_bar)
View(dof)
b/u_bar
r_m = (1+1/10)*b/u
r_m = (1+1/10)*b/u_bar
dof_temp = 9*(1+1/r_m)^2
View(dof_temp)
View(dof)
View(r_m)
View(u_bar)
View(b)
View(q_alpha)
model_name = 'DP'
data_name = 'MCAR_30'
n_way = 1
n_imputations = 10
# import required functions
source("../../utils/compute_coverage.R")
source("../../utils/load_result.R")
source("../../utils/get_true_pmf.R")
# get true pmf
TRUE_Q = get_true_pmf(n_way)
# load result
output_list = load_result(model_name, data_name, n_way)
q_bar = output_list[['q_bar']] # mean estimate
u_bar = output_list[['u_bar']] # within group variance
b = output_list[['b']] # between group variance
dof = output_list[['dof']] # degree of freedom
# calculate total sd
total_sd = sqrt((1+1/n_imputations)*b + u_bar)
# calculate upper bound and lower bound of the 95% CI
q_alpha = qt(0.975, df = dof)
upper_bound = q_bar + q_alpha*total_sd
lower_bound = q_bar - q_alpha*total_sd
# calculate coverage 0/1 and return the mean of each pmf
Q = matrix(rep(TRUE_Q, 100), nrow = 100, byrow = TRUE)
coverage = apply((lower_bound<=Q) & (Q<=upper_bound), MARGIN = 2, FUN = mean)
View(q_alpha)
View(q_alpha)
model_name = 'GAIN'
data_name = 'MCAR_30'
n_way = 1
n_imputations = 10
source("../../utils/load_result.R")
source("../../utils/get_true_pmf.R")
# get true pmf
TRUE_Q = get_true_pmf(n_way)
# load result
output_list = load_result(model_name, data_name, n_way)
q_bar = output_list[['q_bar']] # mean estimate
u_bar = output_list[['u_bar']] # within group variance
b = output_list[['b']] # between group variance
dof = output_list[['dof']] # degree of freedom
# calculate total sd
total_sd = sqrt((1+1/n_imputations)*b + u_bar)
# calculate upper bound and lower bound of the 95% CI
q_alpha = qt(0.975, df = dof)
upper_bound = q_bar + q_alpha*total_sd
lower_bound = q_bar - q_alpha*total_sd
# calculate coverage 0/1 and return the mean of each pmf
Q = matrix(rep(TRUE_Q, 100), nrow = 100, byrow = TRUE)
coverage = apply((lower_bound<=Q) & (Q<=upper_bound), MARGIN = 2, FUN = mean)
coverage = compute_coverage(model_name, data_name, n_way, n_imputations)
model_name = 'GAIN'
data_name = 'MCAR_30'
n_way = 1
n_imputations = 10
source("../../utils/load_result.R")
source("../../utils/get_true_pmf.R")
# get true pmf
TRUE_Q = get_true_pmf(n_way)
# load result
output_list = load_result(model_name, data_name, n_way)
q_bar = output_list[['q_bar']] # mean estimate
u_bar = output_list[['u_bar']] # within group variance
b = output_list[['b']] # between group variance
dof = output_list[['dof']] # degree of freedom
# calculate total sd
total_sd = sqrt((1+1/n_imputations)*b + u_bar)
# calculate upper bound and lower bound of the 95% CI
q_alpha = qt(0.975, df = dof)
upper_bound = q_bar + q_alpha*total_sd
lower_bound = q_bar - q_alpha*total_sd
# calculate coverage 0/1 and return the mean of each pmf
Q = matrix(rep(TRUE_Q, 100), nrow = 100, byrow = TRUE)
coverage = apply((lower_bound<=Q) & (Q<=upper_bound), MARGIN = 2, FUN = mean)
View(q_alpha)
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(readr)
library(xtable)
source("../../utils/compute_bias.R")
data_name = 'MAR_30'
n_imputations = 10
n_way = 1
bias = bias_models(data_name, n_way)
df = format_list(bias)
df_1way = df
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1))
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of bias for different imputation methods for data with 30% values MAR (Marginal probabilities)', digits = 3)
# boxplot for estimates for marginal distribution
boxplot(df, col = 'light blue', xlab = 'Imputation method',
ylab = 'Bias', ylim = c(-0.05, 0.05),
main = 'Bias from different imputation methods: Marginal pmf')
n_way = 2
bias = bias_models(data_name, n_way)
df = format_list(bias)
df_2way = df
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1))
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of bias for different imputation methods for data with 30% values MAR (Bivariate probabilities)', digits = 3)
n_way = 3
bias = bias_models(data_name, n_way)
source("../../utils/compute_bias.R")
data_name = 'MAR_30'
n_imputations = 10
n_way = 1
bias = bias_models(data_name, n_way)
df = format_list(bias)
df_1way = df
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1))
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of bias for different imputation methods for data with 30% values MAR (Marginal probabilities)', digits = 3)
# boxplot for estimates for marginal distribution
boxplot(df, col = 'light blue', xlab = 'Imputation method',
ylab = 'Bias', ylim = c(-0.05, 0.05),
main = 'Bias from different imputation methods: Marginal pmf')
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(readr)
library(xtable)
source("../../utils/compute_bias.R")
data_name = 'MCAR_45'
n_imputations = 10
n_way = 1
bias = bias_models(data_name, n_way)
df = format_list(bias)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1))
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of bias for different imputation methods for data with 45% values MCAR (Marginal probabilities)', digits = 3)
# boxplot for estimates for marginal distribution
boxplot(df, col = 'light blue', xlab = 'Imputation method',
ylab = 'Bias', ylim = c(-0.05, 0.05),
main = 'Bias from different imputation methods: Marginal pmf')
# boxplot for estimates for marginal distribution
boxplot(df, col = 'light blue', xlab = 'Imputation method',
ylab = 'Bias', ylim = c(-0.05, 0.05),
main = 'Bias from different imputation methods: Marginal pmf')
source("../../utils/compute_bias.R")
data_name = 'MCAR_45'
n_imputations = 10
n_way = 1
bias = bias_models(data_name, n_way)
df = format_list(bias)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1))
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of bias for different imputation methods for data with 45% values MCAR (Marginal probabilities)', digits = 3)
# boxplot for estimates for marginal distribution
boxplot(df, col = 'light blue', xlab = 'Imputation method',
ylab = 'Bias', ylim = c(-0.06, 0.06),
main = 'Bias from different imputation methods: Marginal pmf')
# boxplot for estimates for marginal distribution
boxplot(df, col = 'light blue', xlab = 'Imputation method',
ylab = 'Bias', ylim = c(-0.06, 0.06),
main = 'Bias from different imputation methods: Marginal pmf')
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(readr)
library(xtable)
source("../../utils/compute_bias.R")
data_name = 'MCAR_30'
n_imputations = 10
n_way = 1
bias = bias_models(data_name, n_way)
source("../../utils/compute_bias.R")
data_name = 'MCAR_30'
n_imputations = 10
n_way = 1
bias = bias_models(data_name, n_way)
df = format_list(bias)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1))
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of bias for different imputation methods for data with 30% values MCAR (Marginal probabilities)', digits = 3)
# boxplot for estimates for marginal distribution
boxplot(df, col = 'light blue', xlab = 'Imputation method',
ylab = 'Bias', ylim = c(-0.05, 0.05),
main = 'Bias from different imputation methods: Marginal pmf')
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(readr)
library(xtable)
source("../../utils/compute_bias.R")
data_name = 'MAR_45'
n_imputations = 10
n_way = 1
bias = bias_models(data_name, n_way)
df = format_list(bias)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1))
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of bias for different imputation methods for data with 45% values MAR (Marginal probabilities)', digits = 3)
# boxplot for estimates for marginal distribution
boxplot(df, col = 'light blue', xlab = 'Imputation method',
ylab = 'Bias', ylim = c(-0.05, 0.05),
main = 'Bias from different imputation methods: Marginal pmf')
cat('I love you')
# This code generate 100 subsample of the PUMS original data each with 10000 observations
# It then made each of those 100 dataset missing according to 4 missing mechanism
library(MASS)
library(tidyverse)
setwd("~/DS_Projects/Nonparam-oridinal-nominal/Analysis/data_generation")
source("../../utils/sample_PUMS.R")
source("../../utils/make_MCAR.R")
source("../../utils/make_MAR_30.R")
source("../../utils/make_MAR_45.R")
source('../../utils/load_data.R')
# Specify parameters of the dataset and missing data mechanism
data_name = 'fully_observed/fully_observed_301'
# Root for different dataset
#root_MCAR_45 <- '../../Datasets/MCAR_45/MCAR_45_'
root_MCAR_30 <- '../../Datasets/MCAR_30/MCAR_30_'
i = 301
df = load_data(data_name)
#df_MCAR_45 <- make_MCAR(df, 0.45)
df_MCAR_30 <- make_MCAR(df, 0.30)
# Obtain a full path for the file to be saved
#name_MCAR_45 <- paste(root_MCAR_45, i,'.csv', sep = '')
name_MCAR_30 <- paste(root_MCAR_30, i,'.csv', sep = '')
# Save them according to the name and file structure
write.table(df_MCAR_30, name_MCAR_30, row.names = FALSE, sep = ',')
cat(paste('finish generating',i,'datasets','\n'))
cat(name_MCAR_30)
# This code generate 100 subsample of the PUMS original data each with 10000 observations
# It then made each of those 100 dataset missing according to 4 missing mechanism
library(MASS)
library(tidyverse)
setwd("~/DS_Projects/Nonparam-oridinal-nominal/Analysis/data_generation")
source("../../utils/sample_PUMS.R")
source("../../utils/make_MCAR.R")
source("../../utils/make_MAR_30.R")
source("../../utils/make_MAR_45.R")
source('../../utils/load_data.R')
# Specify parameters of the dataset and missing data mechanism
data_name = 'fully_observed/fully_observed_301'
# Root for different dataset
#root_MCAR_45 <- '../../Datasets/MCAR_45/MCAR_45_'
root_MCAR_30 <- '../../Datasets/MCAR_30/MCAR_30_'
i = 301
df = load_data(data_name)
#df_MCAR_45 <- make_MCAR(df, 0.45)
df_MCAR_30 <- make_MCAR(df, 0.30)
# Obtain a full path for the file to be saved
#name_MCAR_45 <- paste(root_MCAR_45, i,'.csv', sep = '')
name_MCAR_30 <- paste(root_MCAR_30, i,'.csv', sep = '')
# Save them according to the name and file structure
write.table(df_MCAR_30, name_MCAR_30, row.names = FALSE, sep = ',')
cat(paste('finish generating',i,'datasets','\n'))
cat(name_MCAR_30)
# This code generate 100 subsample of the PUMS original data each with 10000 observations
# It then made each of those 100 dataset missing according to 4 missing mechanism
library(MASS)
library(tidyverse)
setwd("~/DS_Projects/Nonparam-oridinal-nominal/Analysis/data_generation")
source("../../utils/sample_PUMS.R")
source("../../utils/make_MCAR.R")
source("../../utils/make_MAR_30.R")
source("../../utils/make_MAR_45.R")
source('../../utils/load_data.R')
# Specify parameters of the dataset and missing data mechanism
data_name = 'fully_observed/fully_observed_15'
# Root for different dataset
root_MCAR_45 <- '../../Datasets/MCAR_45/MCAR_45_'
#root_MCAR_30 <- '../../Datasets/MCAR_30/MCAR_30_'
i = 15
df = load_data(data_name)
df_MCAR_45 <- make_MCAR(df, 0.45)
#df_MCAR_30 <- make_MCAR(df, 0.30)
# Obtain a full path for the file to be saved
name_MCAR_45 <- paste(root_MCAR_45, i,'.csv', sep = '')
#name_MCAR_30 <- paste(root_MCAR_30, i,'.csv', sep = '')
# Save them according to the name and file structure
write.table(df_MCAR_45, name_MCAR_45, row.names = FALSE, sep = ',')
cat(paste('finish generating',i,'datasets','\n'))
cat(name_MCAR_45)
# This code generate 100 subsample of the PUMS original data each with 10000 observations
# It then made each of those 100 dataset missing according to 4 missing mechanism
library(MASS)
library(tidyverse)
setwd("~/DS_Projects/Nonparam-oridinal-nominal/Analysis/data_generation")
source("../../utils/sample_PUMS.R")
source("../../utils/make_MCAR.R")
source("../../utils/make_MAR_30.R")
source("../../utils/make_MAR_45.R")
source('../../utils/load_data.R')
# Specify parameters of the dataset and missing data mechanism
data_name = 'fully_observed/fully_observed_236'
# Root for different dataset
root_MCAR_45 <- '../../Datasets/MCAR_45/MCAR_45_'
#root_MCAR_30 <- '../../Datasets/MCAR_30/MCAR_30_'
i = 236
df = load_data(data_name)
df_MCAR_45 <- make_MCAR(df, 0.45)
#df_MCAR_30 <- make_MCAR(df, 0.30)
# Obtain a full path for the file to be saved
name_MCAR_45 <- paste(root_MCAR_45, i,'.csv', sep = '')
#name_MCAR_30 <- paste(root_MCAR_30, i,'.csv', sep = '')
# Save them according to the name and file structure
write.table(df_MCAR_45, name_MCAR_45, row.names = FALSE, sep = ',')
cat(paste('finish generating',i,'datasets','\n'))
cat(name_MCAR_45)
