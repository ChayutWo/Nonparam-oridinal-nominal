install.packages('mnormt')
install.packages('coda')
# DO NOT ALTER CODE IN THIS CHUNK
# The very first time you use this R markdown file, you should install each of the packages below.
# The same goes for other packages you might decide to use
# Remember that you only need to install each R package once in R (ever -- unless you change computers).
# All you need to do whenever you need to use the package again (after restarting the R session),
# is to use the library function to call the package.
# For example, type install.packages("knitr") in the console to install the knitr package.
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(arm)
library(pROC)
library(tidyverse)
library(MASS)
library(tigerstats)
library(leaps)
library(car)
library(rms)
require(caret)
require(e1071)
library(lme4)
library(lattice)
library(broom)
library(boot)
library(ggplot2)
library(cobalt)
require(rstanarm)
require(magrittr)
require(rstan)
require(MCMCpack)
library(abind)
library(matrixStats)
library(truncnorm)
library(mvtnorm)
library(mnormt)
library(coda)
# load dataset: df
load('ordinalPUMS.Rdata')
setwd("D:/DS_Project/Nonparam-oridinal-nominal")
# load dataset: df
load('ordinalPUMS.Rdata')
load('ordinalPUMS.Rdata')
# load dataset: df
load('.//ordinalPUMS.Rdata')
# load dataset: df
load('./ordinalPUMS.Rdata')
# load dataset: df
load('../ordinalPUMS.Rdata')
# take 10,000 samples: df
n = 10000
sample <- sample(nrow(df), size = 10000)
df <- df[sample,]
# create MCAR scneario with 30% chance of missing: df_observed
missing_prob = 0.3
df_observed <- df
missing_col = colnames(df)[c(1,3,5,7,9,11)]
for (col in missing_col) {
missing_ind <- rbernoulli(n,p = missing_prob)
df_observed[missing_ind, col] <- NA
}
# load dataset: df
load('../ordinalPUMS.Rdata')
# take 10,000 samples: df
n = 10000
sample <- sample(nrow(df), size = 10000)
df <- df[sample,]
# create MCAR scneario with 30% chance of missing: df_observed
missing_prob = 0.3
df_observed <- df
missing_col = colnames(df)[c(1,3,5,7,9,11)]
for (col in missing_col) {
missing_ind <- rbernoulli(n,p = missing_prob)
df_observed[missing_ind, col] <- NA
}
# load dataset: df
load('../ordinalPUMS.Rdata')
# take 10,000 samples: df
n = 10000
sample <- sample(nrow(df), size = 10000)
df <- df[sample,]
# create MCAR scneario with 30% chance of missing: df_observed
set.seed(0)
missing_prob = 0.3
df_observed <- df
missing_col = colnames(df)[c(1,3,5,7,9,11)]
for (col in missing_col) {
missing_ind <- rbernoulli(n,p = missing_prob)
df_observed[missing_ind, col] <- NA
}
source("probitBayes.R")
source("../probitBayes.R")
N = 40
Mon = 100
B = 5
thin.int = 2
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
sampled_y <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
View(df)
# DO NOT ALTER CODE IN THIS CHUNK
# The very first time you use this R markdown file, you should install each of the packages below.
# The same goes for other packages you might decide to use
# Remember that you only need to install each R package once in R (ever -- unless you change computers).
# All you need to do whenever you need to use the package again (after restarting the R session),
# is to use the library function to call the package.
# For example, type install.packages("knitr") in the console to install the knitr package.
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(arm)
library(pROC)
library(tidyverse)
library(MASS)
library(tigerstats)
library(leaps)
library(car)
library(rms)
require(caret)
require(e1071)
library(lme4)
library(lattice)
library(broom)
library(boot)
library(ggplot2)
library(cobalt)
require(rstanarm)
require(magrittr)
require(rstan)
require(MCMCpack)
library(abind)
library(matrixStats)
library(truncnorm)
library(mvtnorm)
library(mnormt)
library(coda)
# sample MCAR dataset from PUMS
source("../../utils/sampleMCAR.R")
n = 10000
missing_col = c(1,3,7,9,10,11)
missing_prob = 0.3
set.seed(0)
output_list <- sampleMCAR(n, missing_prob)
df <- output_list[['df']]
df_observed <- output_list[['df_observed']]
source("../../probitBayes_optimized.R")
N = 40
Mon = 300
B = 1
thin.int = 1
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
proc.time()
ptm <- proc.time()
proc.time()
proc.time()
source("../../probitBayes_optimized.R")
N = 40
Mon = 20
B = 1
thin.int = 1
ptm <- proc.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
proc.time() - ptm
source("../../probitBayes.R")
N = 40
Mon = 20
B = 1
thin.int = 1
ptm <- proc.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
proc.time() - ptm
Sys.time()
start = Sys.time()
Sys.time()-start
# sample MCAR dataset from PUMS
source("../../utils/sampleMCAR.R")
n = 10000
missing_col = c(1,3,7,9,10,11)
missing_prob = 0.3
set.seed(0)
output_list <- sampleMCAR(n, missing_prob)
df <- output_list[['df']]
df_observed <- output_list[['df_observed']]
source("../../probitBayes.R")
N = 40
Mon = 20
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
source("../../probitBayes_optimized.R")
N = 40
Mon = 20
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
source("../../probitBayes_optimized.R")
N = 40
Mon = 500
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
# sample MCAR dataset from PUMS
source("../../utils/sampleMCAR.R")
n = 10000
missing_col = c(1,3,7,9,10,11)
missing_prob = 0.3
set.seed(0)
output_list <- sampleMCAR(n, missing_prob)
df <- output_list[['df']]
df_observed <- output_list[['df_observed']]
source("../../probitBayes_optimized.R")
N = 40
Mon = 500
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
# sample MCAR dataset from PUMS
source("../../utils/sampleMCAR.R")
n = 10000
missing_col = c(1,3,7,9,10,11)
missing_prob = 0.3
set.seed(0)
output_list <- sampleMCAR(n, missing_prob)
df <- output_list[['df']]
df_observed <- output_list[['df_observed']]
source("../../probitBayes.R")
N = 40
Mon = 500
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
# sample MCAR dataset from PUMS
source("../../utils/sampleMCAR.R")
n = 10000
missing_col = c(1,3,7,9,10,11)
missing_prob = 0.3
set.seed(0)
output_list <- sampleMCAR(n, missing_prob)
df <- output_list[['df']]
df_observed <- output_list[['df_observed']]
source("../../probitBayes_optimized.R")
N = 40
Mon = 500
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
Sys.time()
start = Sys.time()
class(Sys.time() - start)
Sys.time() - start
c(Sys.time() - start, Sys.time() - start, Sys.time() - start)
mean(c(Sys.time() - start, Sys.time() - start, Sys.time() - start))
start
diff_time = Sys.time() - start
diff_time
diff_time
diff_time
diff_time
diff_time
diff_time
diff_time = Sys.time() - start
diff_time
source("../../probitBayes_time.R")
N = 40
Mon = 10
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
source("../../probitBayes_time.R")
N = 40
Mon = 1
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
source("../../probitBayes_time.R")
N = 40
Mon = 100
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
source("../../probitBayes_time.R")
N = 40
Mon = 5
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
source("../../probitBayes_time.R")
N = 40
Mon = 5
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
source("../../probitBayes_time.R")
N = 40
Mon = 5
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
source("../../probitBayes_time.R")
N = 40
Mon = 5
B = 1
thin.int = 1
start = Sys.time()
# function(y, N = 40, Mon = 2000, B = 300, thin.int = 5, seed = 0)
output_list <- probitBayesImputation(df_observed, N, Mon, B, thin.int)
Sys.time() - start
# DO NOT ALTER CODE IN THIS CHUNK
# The very first time you use this R markdown file, you should install each of the packages below.
# The same goes for other packages you might decide to use
# Remember that you only need to install each R package once in R (ever -- unless you change computers).
# All you need to do whenever you need to use the package again (after restarting the R session),
# is to use the library function to call the package.
# For example, type install.packages("knitr") in the console to install the knitr package.
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(arm)
library(pROC)
library(tidyverse)
library(MASS)
library(tigerstats)
library(leaps)
library(car)
library(rms)
require(caret)
require(e1071)
library(lme4)
library(lattice)
library(broom)
library(boot)
library(ggplot2)
library(cobalt)
require(tidyverse)
require(rstanarm)
require(magrittr)
require(rstan)
require(MCMCpack)
library(abind)
library(matrixStats)
library(truncnorm)
library(mvtnorm)
library(MCMCpack)
library(mnormt)
library(coda)
# Download raw household level data
psam_husa <- read.table('Datasets/csv_hus/psam_husa.csv', sep = ',', header = TRUE)
psam_husb <- read.table('Datasets/csv_hus/psam_husb.csv', sep = ',', header = TRUE)
# Join them
household <- rbind(psam_husa, psam_husb)
# Filter only housing unit
household <- household %>%
filter(TYPE == 1)
# remove loaded data to save space
rm(psam_husa,psam_husb)
# Download raw personal level data
psam_pusa <- read.table('Datasets/csv_pus/psam_pusa.csv', sep = ',', header = TRUE)
psam_pusb <- read.table('Datasets/csv_pus/psam_pusb.csv', sep = ',', header = TRUE)
# Filter only household reference person
psam_pusa <- psam_pusa %>%
filter(RELP == 0)
psam_pusb <- psam_pusb %>%
filter(RELP == 0)
# Join them
personal <- rbind(psam_pusa, psam_pusb)
# remove loaded data to save space
rm(psam_pusa, psam_pusb)
# Merge the two on SERIALNO
merged_df <- merge(household, personal, by = 'SERIALNO')
rm(household, personal)
head(merged_df)
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(readr)
library(xtable)
source("../../utils/compute_coverage.R")
data_name = 'MAR_30'
n_imputations = 50
n_way = 1
coverage = coverage_models(data_name, n_way, n_imputations)
df = format_list(coverage)
df_1way = df
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 30% values MAR (Marginal probabilities)', digits = 2)
# boxplot for estimates for marginal distribution
boxplot(df, col = 'light blue', xlab = 'Imputation method',
ylab = 'Coverage (fraction)', ylim = c(0,1),
main = paste('Coverage from different imputation methods: Marginal pmf'))
n_way = 2
coverage = coverage_models(data_name, n_way, n_imputations)
df = format_list(coverage)
df_2way = df
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 30% values MAR (Bivariate probabilities)', digits = 2)
setEPS()
postscript("../figures/coverage_12way_MAR_30.eps", width=10, height=6, horizontal = FALSE, onefile=FALSE)
par(mfrow=c(1,2), oma = c(5.5,4.5,0.2,0.2) + 0.1, mar = c(0.25,0.25,1.25,1.25) + 0.1)
boxplot(df_1way[, c(1,2,3,4,5,8,9)], col = 'light blue', ylim = c(0,1), main = paste('Marginal'),
las = 2)
boxplot(df_2way[,c(1,2,3,4,5,8,9)], col = 'peachpuff', ylim = c(0,1), main = paste('Bivariate'),
las = 2, yaxt="n")
axis(2, labels=FALSE)
title(ylab = "Coverage (fraction)",
outer = TRUE, line = 3)
dev.off()
n_way = 3
coverage = coverage_models(data_name, n_way, n_imputations)
df = format_list(coverage)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 30% values MAR (Trivariate probabilities)', digits = 2)
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(readr)
library(xtable)
source("../../utils/compute_coverage.R")
data_name = 'MAR_45'
n_imputations = 50
n_way = 1
coverage = coverage_models(data_name, n_way, n_imputations)
df = format_list(coverage)
df_1way = df
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 45% values MAR (Marginal probabilities)', digits = 2)
# boxplot for estimates for marginal distribution
boxplot(df, col = 'light blue', xlab = 'Imputation method',
ylab = 'Coverage (fraction)', ylim = c(0,1),
main = paste('Coverage from different imputation methods: Marginal pmf'))
n_way = 2
coverage = coverage_models(data_name, n_way, n_imputations)
df = format_list(coverage)
df_2way = df
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 45% values MAR (Bivariate probabilities)', digits = 2)
setEPS()
postscript("../figures/coverage_12way_MAR_45.eps", width=11, height=6, horizontal = FALSE, onefile=FALSE)
par(mfrow=c(1,2), oma = c(5.5,4.5,0.2,0.2) + 0.1, mar = c(0.25,0.25,1.25,1.25) + 0.1)
boxplot(df_1way, col = 'light blue', ylim = c(0,1), main = paste('Marginal'),
las = 2)
boxplot(df_2way, col = 'peachpuff', ylim = c(0,1), main = paste('Bivariate'),
las = 2, yaxt="n")
axis(2, labels=FALSE)
title(ylab = "Coverage (fraction)",
outer = TRUE, line = 3)
dev.off()
n_way = 3
coverage = coverage_models(data_name, n_way, n_imputations)
df = format_list(coverage)
summary = apply(df, MARGIN = 2, quantile , probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
rownames(summary) <- c('Min.', '1st Qu.', 'Median', '3rd Qu.', 'Max.')
xtable(summary, caption = 'Distribution of coverage for different imputation methods for data with 45% values MAR (Trivariate probabilities)', digits = 2)
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center')
knitr::opts_chunk$set(fig.cap = "",  fig.path = "Plot")
library(knitr)
library(dplyr)
library(readr)
library(xtable)
source("../../utils/compute_coverage.R")
data_name = 'MCAR_30'
n_imputations = 50
n_way = 1
coverage = coverage_models(data_name, n_way, n_imputations)
